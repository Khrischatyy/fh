version: '3.8'

services:
  # Caddy Reverse Proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: funny-how-caddy-prod
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3 support
    volumes:
      - ./caddy/Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - frontend
      - chat
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Frontend (Nuxt 3) - Production build
  frontend:
    build:
      context: ./frontend/client
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - AXIOS_BASEURL=http://caddy
        - AXIOS_BASEURL_CLIENT=http://10.128.0.6
        - AXIOS_API_VERSION=/api
    container_name: funny-how-frontend-prod
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NUXT_ENV_GOOGLE_MAPS_API=${GOOGLE_MAPS_API}
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # FastAPI Backend with Gunicorn
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: funny-how-api-prod
    command: gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --timeout 120 --keep-alive 5
    expose:
      - "8000"
    env_file:
      - ./.env
    environment:
      - APP_ENV=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database with security hardening
  db:
    image: postgres:16-alpine
    container_name: funny-how-db-prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: 256mb

  # Redis with persistence and security
  redis:
    image: redis:7-alpine
    container_name: funny-how-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery Worker (using Redis as broker)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: funny-how-celery-worker-prod
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=100
    env_file:
      - ./.env
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Chat Service (Socket.io)
  chat:
    build:
      context: ./frontend/chat
      dockerfile: Dockerfile
    container_name: funny-how-chat-prod
    expose:
      - "6001"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DB_HOST=db
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=5432
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - funny-how-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

networks:
  funny-how-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
