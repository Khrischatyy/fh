[project]
name = "funny-how-api"
version = "1.0.0"
description = "Studio booking platform API built with FastAPI"
authors = [
    {name = "Funny How Team", email = "dev@funny-how.com"}
]
requires-python = ">=3.11"
license = {text = "Proprietary"}

dependencies = [
    # Core Framework
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",

    # Database
    "sqlalchemy>=2.0.25",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.0",

    # Authentication & Security - FastAPI Users
    "fastapi-users[sqlalchemy]>=13.0.0",
    "fastapi-users[oauth]>=13.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.1.0",
    "httpx>=0.26.0",
    "authlib>=1.3.0",

    # Payment Gateways
    "stripe>=7.0.0",
    "squareup>=30.0.0.0",

    # AWS
    "boto3>=1.34.0",

    # Email
    "aiosmtplib>=3.0.0",
    "email-validator>=2.1.0",
    "jinja2>=3.1.0",
    "sendgrid>=6.11.0",

    # Redis & Caching
    "redis>=5.0.0",

    # Task Queue
    "celery>=5.3.0",
    "kombu>=5.3.0",

    # Image Processing
    "pillow>=10.2.0",

    # Utilities
    "python-dotenv>=1.0.0",
    "pytz>=2024.1",
    "python-dateutil>=2.8.0",

    # Rate Limiting
    "slowapi>=0.1.9",

    # Monitoring (optional)
    "sentry-sdk[fastapi]>=1.39.0",
]

[project.optional-dependencies]
dev = [
    # Development Tools
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",

    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "faker>=22.0.0",

    # Database Testing
    "pytest-alembic>=0.11.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",

    # Debugging
    "ipython>=8.20.0",
    "ipdb>=0.13.0",

    # Code Quality
    "coverage>=7.4.0",
]

prod = [
    # Production Server
    "gunicorn>=21.2.0",

    # Performance
    "orjson>=3.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic/versions
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.isort]
profile = "black"
line_length = 100
