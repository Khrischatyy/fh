services:
  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: funny-how-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
      - frontend
    networks:
      - funny-how-network
    restart: unless-stopped

  # Frontend (Nuxt 3)
  frontend:
    build:
      context: ./frontend/client
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
        - AXIOS_BASEURL=http://caddy
        - AXIOS_BASEURL_CLIENT=http://127.0.0.1
        - AXIOS_API_VERSION=/api
    container_name: funny-how-frontend
    command: npm run dev
    volumes:
      - ./frontend/client:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - AXIOS_BASEURL=http://caddy
      - AXIOS_BASEURL_CLIENT=http://127.0.0.1
      - AXIOS_API_VERSION=/api
      - NUXT_ENV_GOOGLE_MAPS_API=${GOOGLE_MAPS_API:-default_map_key}
    networks:
      - funny-how-network
    restart: unless-stopped

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: funny-how-api
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
      - /app/__pycache__
    expose:
      - "8000"
    env_file:
      - ./.env
    environment:
      - APP_ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/book_studio
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - db
      - redis
    networks:
      - funny-how-network

  # PostgreSQL Database
  db:
    image: postgres:16
    container_name: funny-how-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=book_studio
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - funny-how-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Redis
  redis:
    image: redis:7-alpine
    container_name: funny-how-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - funny-how-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always

  # Celery Worker (using Redis as broker)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: funny-how-celery-worker
    command: celery -A src.tasks.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/book_studio
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - db
      - redis
    networks:
      - funny-how-network
    restart: always

  # Chat Service (Socket.io)
  chat:
    build:
      context: ./frontend/chat
      dockerfile: Dockerfile
    container_name: funny-how-chat
    ports:
      - "6001:6001"
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=db
      - DB_DATABASE=book_studio
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    depends_on:
      - redis
      - db
    networks:
      - funny-how-network
    restart: unless-stopped

networks:
  funny-how-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
  caddy_data:
  caddy_config: